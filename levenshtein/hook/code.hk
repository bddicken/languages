import { new_array, fill } from arrays;

// Can either define your own min function
// or use a language / standard library function
fn min(a, b, c) {
  var min = a;
  if (b < min) min = b;
  if (c < min) min = c;
  return min;
}

fn levenshtein_distance(str1t, str2t) {
  // Get lengths of both strings
  let mt = len(str1t);
  let nt = len(str2t);
  // Assign shorter one to str1, longer one to str2
  let str1 = if (mt <= nt) str1t else str2t;
  let str2 = if (mt <= nt) str2t else str1t;
  // store the lengths of shorter in m, longer in n
  let m = if (str1 == str1t) mt else nt;
  let n = if (str1 == str1t) nt else mt;

  // Create two rows, previous and current
  var prev = new_array(m+1);
  var curr = fill(0, m+1);

  // initialize the previous row
  for (var i = 0; i <= m; i++) {
    prev[] = i;
  }

  // Iterate and compute distance
  for (var i = 1; i <= n; i++) {
    curr[0] = i;
    for (var j = 1; j <= m; j++) {
      let cost = if (str1[j-1] == str2[i-1]) 0 else 1;
      curr[j] = min(
        prev[j] + 1,      // Deletion
        curr[j-1] + 1,    // Insertion
        prev[j-1] + cost  // Substitution
      );
    }
    for (var j = 0; j <= m; j++) {
      prev[j] = curr[j];
    }
  }

  // Return final distance, stored in prev[m]
  return prev[m];
}

var min_distance = -1;
var times = 0;
// Iterate through all combinations of command line args
let argc = len(args);
for (var i = 0; i < argc; i++) {
  for (var j = 0; j < argc; j++) {
    // Don't compare the same string to itself
    if (i != j) {
      let distance = levenshtein_distance(args[i], args[j]);
      if (min_distance == -1 || min_distance > distance) {
        min_distance = distance;
      }
      times++;
    }
  }
}

// The only output from the program should be the times (number of comparisons)
// and min distance calculated of all comparisons. Two total lines of output, 
// formatted exactly like this.
println("times: " + to_string(times));
println("min_distance: " + to_string(min_distance));
